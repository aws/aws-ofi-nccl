# -*- Autoconf -*-
#
# Copyright (c) 2018-2023, Amazon.com, Inc. or its affiliates. All rights reserved.
#
# See LICENSE.txt for license information
#

# Initialization
AC_INIT([aws-ofi-nccl], [GitHub-dev], [al-ofi-nccl-team@amazon.com], , [http://github.com/aws/aws-ofi-nccl])
AC_PREREQ([2.69])
AC_CONFIG_SRCDIR([src/nccl_ofi_net.c])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_HEADERS([include/config.h])
AC_CONFIG_MACRO_DIRS([m4])

AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects tar-pax])
AM_SILENT_RULES([yes])

AH_TOP([/*
 * Copyright (c) 2018-2024 Amazon.com, Inc. or its affiliates. All rights reserved.
 */

#ifndef NCCL_OFI_CONFIG_H
#define NCCL_OFI_CONFIG_H

])
AH_BOTTOM([
#include "nccl_ofi_config_bottom.h"
#endif /* NCCL_OFI_CONFIG_H */
])

dnl AX_CHECK_ENABLE_DEBUG must be called before AC_PROG_CC or
dnl AM_PROG_AR
AX_CHECK_ENABLE_DEBUG([no])
dnl Enable _GNU_SOURCE and other system extensions. The plugin uses several
dnl nonstandard system functions, and the plugin only supports Linux OSes, so
dnl the risk of silently enabling system extensions is minimal.
AC_USE_SYSTEM_EXTENSIONS
dnl AM_PROG_AR must be called before LT_INIT
AM_PROG_AR
AC_PROG_RANLIB
LT_INIT([shared disable-static pic-only])

NCCL_NET_OFI_DISTCHCK_CONFIGURE_FLAGS=

# Checks for programs
AC_PROG_CC
AM_PROG_CC_C_O
m4_version_prereq([2.70], [], [AC_PROG_CC_STDC])
AC_C_INLINE

dnl ac_check_enable_debug will make sure AC_PROG_CC doesn't add a
dnl bunch of debugging flags, so there's no ordering requirement
dnl between this and AC_PROG_CC.
AS_IF([test "${ax_enable_debug}" = "no"], [
             dnl Enable O3 optimization
             CFLAGS="${CFLAGS} -O3"

             dnl dead code elim
             CFLAGS="${CFLAGS} -ffunction-sections -fdata-sections"

             dnl https://maskray.me/blog/2021-05-09-fno-semantic-interposition
             CFLAGS="${CFLAGS} -fno-semantic-interposition -fvisibility=hidden"
             LDFLAGS="${LDFLAGS} -Bsymbolic"
            ])
CHECK_ENABLE_SANITIZER()


# Checks for header files
AC_HEADER_STDBOOL
AS_IF([test "${ac_cv_header_stdbool_h}" = "no"],
      [AC_MSG_ERROR([NCCL OFI Plugin requires stdbool.h])])

AC_CHECK_HEADER([limits.h], [], [AC_MSG_ERROR([NCCL OFI Plugin rquires limits.h])])
AC_CHECK_HEADER([stdlib.h], [], [AC_MSG_ERROR([NCCL OFI Plugin rquires stdlib.h])])
AC_CHECK_HEADER([string.h], [], [AC_MSG_ERROR([NCCL OFI Plugin rquires string.h])])
AC_CHECK_HEADER([unistd.h], [], [AC_MSG_ERROR([NCCL OFI Plugin rquires unistd.h])])

AC_CHECK_HEADERS([linux/limits.h])

# Checks for types
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UINT64_T


# Checks for library functions
AC_FUNC_MALLOC
AC_CHECK_FUNC([memset], [], [AC_MSG_ERROR([NCCL OFI Plugin requires memset function.])])
AC_CHECK_FUNC([realpath], [], [AC_MSG_ERROR([NCCL OFI Plugin requires realpath function.])])
AC_CHECK_FUNCS([gettid])
AC_SEARCH_LIBS([dlopen], [dl], [], [AC_MSG_ERROR([NCCL OFI Plugin requires dlopen])])

dnl it is insufficient to just link against pthread with -lpthread
dnl background: https://stackoverflow.com/a/23251828
CPPFLAGS="${CPPFLAGS} -pthread"
LDFLAGS="${LDFLAGS} -pthread"
AC_SEARCH_LIBS([pthread_mutexattr_settype], [pthread], [], [AC_MSG_ERROR([NCCL OFI Plugin requires pthreads.])])

AC_SEARCH_LIBS([log2], [m], [], [AC_MSG_ERROR([NCCL OFI Plugin requires the log2 library function.])])

dnl Need at least glibc 2.3 or later (released 2002-10-02) , because
dnl 2.2.3 added support for atexit() in shared libraries.
AC_MSG_CHECKING([for glibc 2.3 or later])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
  [[#include <gnu/libc-version.h>
  ]],
  [[#if __GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ < 3)
#error "Glibc too old to support atexit."
#endif
  ]])],
    [AC_MSG_RESULT([yes])],
    [AC_MSG_RESULT([no])
     AC_MSG_ERROR([Found glibc prior to version 2.3.  Version 2.3 or later required])])

# Checks for external packages
CHECK_PKG_LIBFABRIC([], [AC_MSG_ERROR([NCCL OFI Plugin could not find a working Libfabric install.])])

have_device_interface=no
CHECK_PKG_NEURON([AS_IF([test -n "${want_cuda}"],
                        [AC_MSG_ERROR([Cannot enable both CUDA and neuron.])],
                        [want_cuda=no])
                  have_device_interface=neuron])
CHECK_PKG_CUDA([have_device_interface=cuda])
AS_IF([test "${have_device_interface}" = "no"],
      [AC_MSG_ERROR([NCCL OFI Plugin requires either CUDA or Neuron runtime.])])

CHECK_PKG_LTTNG()
CHECK_PKG_NVTX()

CHECK_PKG_HWLOC([],
		[AC_MSG_ERROR([Could not find the hwloc library. Use --with-hwloc to provide the path to non-standard hwloc installation.])])

CHECK_PKG_VALGRIND()
CHECK_VAR_REDZONE()

NCCL_OFI_PLATFORM="none"
AS_IF([test "${NCCL_OFI_PLATFORM}" = "none"], [AX_CHECK_PLATFORM_AWS()])

AS_IF([test "${valgrind_enabled}" = "1" -a "${enable_asan}" = "yes"],
      [AC_MSG_ERROR([Enabling ASAN and valgrind at the same time is not permitted])])

CHECK_ENABLE_MEMFD_CREATE()

# do we want our tests?
CHECK_PKG_MPI([found_mpi="yes"], [found_mpi="no"])

AC_ARG_ENABLE([tests],
   [AS_HELP_STRING([--disable-tests], [Disable build of unit/functional test binaries])])

build_unit_tests=yes
build_func_tests=yes
AS_IF([test "${enable_tests}" == "no"],
      [build_unit_tests=no build_func_tests=no])
AS_IF([test "${enable_tests}" != "no" -a "${found_mpi}" = "no" ],
      [AC_MSG_WARN([Cannot build functional tests without MPI. Disabling functional tests.])
       build_func_tests=no])
AS_IF([test "${enable_tests}" != "no" -a "${have_device_interface}" = "neuron" ],
      [AC_MSG_WARN([Functional tests not available on neuron, disabling.])
       build_func_tests=no])
AM_CONDITIONAL([ENABLE_UNIT_TESTS], [test "$build_unit_tests" == "yes"])
AM_CONDITIONAL([ENABLE_FUNC_TESTS], [test "$build_func_tests" == "yes"])

# Enable output at the TRACE level for unit tests.
AC_ARG_ENABLE([trace],
   [AS_HELP_STRING([--enable-trace], [Enable printing trace messages in test programs])])
AC_MSG_CHECKING([whether to enable trace messages])
AS_IF([test "${enable_trace}" = "yes" ],
      [trace=1
       AC_MSG_RESULT(yes)],
      [trace=0
       AC_MSG_RESULT(no)])
AC_DEFINE_UNQUOTED([OFI_NCCL_TRACE], [${trace}], [Defined to 1 unit test output should include TRACE level])

picky_cflags=""
AC_DEFUN([ADD_PICKY_FLAGS],[
    AC_LANG_PUSH([C])
    AX_CHECK_COMPILE_FLAG([$1], [picky_cflags="${picky_cflags} $1"], [], [-Werror])
    AC_LANG_POP()
    ])

dnl standard and normal
ADD_PICKY_FLAGS([-Wall -Wextra])
dnl C specific warning that warngs when using C features which prevent parsing
dnl as C++. Best-effort, and doesn't cover everything.
ADD_PICKY_FLAGS([-Wc++-compat])
dnl gcc manual says this is enabled with c++-compat, but seemingly bugged.
ADD_PICKY_FLAGS([-Wjump-misses-init])

dnl some top-level API functions have unused parameters, but we have to keep
dnl them. TODO: explicitly annotate those functions, rather than setting this
dnl globally.
ADD_PICKY_FLAGS([-Wno-unused-parameter])

dnl warn when a variable shadows another variable.
ADD_PICKY_FLAGS([-Wshadow])
dnl warn on security issues around functions that format output (ie printf)
ADD_PICKY_FLAGS([-Wformat=2])

dnl warn when a case statement is missing a break or a line that contains a
dnl comment before the next case.
ADD_PICKY_FLAGS([-Wimplicit-fallthrough=2])

dnl enable GCC's static analyzer
ADD_PICKY_FLAGS([-fanalyzer])
dnl todo: clang-sa flags

AC_ARG_ENABLE([picky-compiler],
   [AS_HELP_STRING([--disable-picky-compiler], [Disable adding picky compiler flags.])])
AS_IF([test "${enable_picky_compiler}" != "no"],
      [AC_MSG_NOTICE([Adding ${picky_cflags} to CFLAGS.])
       CFLAGS="${CFLAGS} ${picky_cflags}"
       AS_UNSET([picky_cflags])])

werror_flags="-Werror"
AC_ARG_ENABLE([werror],
   [AS_HELP_STRING([--enable-werror], [(Developer) Enable setting -Werror.  Off by default, unless building from Git tree.])])
AS_IF([test -d "${srcdir}/.git" -a -z "${enable_werror}"],
      [AC_MSG_NOTICE([Found .git directory.  Adding ${werror_flags} to CFLAGS.])
       CFLAGS="${werror_flags} ${CFLAGS}"],
      [test "${enable_werror}" = "yes"],
      [AC_MSG_NOTICE([Adding ${werror_flags} to CFLAGS.])
       CFLAGS="${werror_flags} ${CFLAGS}"])

AC_SUBST([NCCL_NET_OFI_DISTCHCK_CONFIGURE_FLAGS])

AC_CONFIG_FILES([Makefile
                 include/Makefile
                 src/Makefile
                 tests/Makefile
                 tests/functional/Makefile
                 tests/unit/Makefile
                 topology/Makefile])
AC_OUTPUT
echo "*"
echo "* AWS OFI NCCL plugin has been configured."
echo "*"
echo "* Platform-specific optimizations: ${NCCL_OFI_PLATFORM}"
echo "*"
