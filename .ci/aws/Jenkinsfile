/* SPDX-License-Identifier: BSD-2-Clause OR GPL-2.0-only */
/* SPDX-FileCopyrightText: Copyright Amazon.com, Inc. or its affiliates. All rights reserved. */
// Use milestones to abort old builds when the user force pushes
def buildNumber = env.BUILD_NUMBER as int
if (buildNumber > 1) milestone(buildNumber - 1)
milestone(buildNumber)


import groovy.transform.Field
@Field boolean build_ok = true

def get_portafiducia_download_path() {
    /* Stable Portafiducia tarball */
    def AWS_ACCOUNT_ID = sh (
                script: "aws sts get-caller-identity --query Account --output text | tr -dc 0-9",
                returnStdout: true
              )
    return "s3://libfabric-ci-$AWS_ACCOUNT_ID-us-west-2/portafiducia/portafiducia.tar.gz"
}

def download_and_extract_portafiducia(outputDir) {
    /* Download PortaFiducia tarball from S3 and extract to outputDir */
    def tempPath = "/tmp/portafiducia.tar.gz"
    def downloadPath = this.get_portafiducia_download_path()

    def ret = sh (
        script: "mkdir -p ${outputDir} && aws s3 cp ${downloadPath} ${tempPath} && " +
            "tar xf ${tempPath} -C ${outputDir}",
        returnStatus: true,
    )

    if (ret != 0) {
        unstable('Failed to download and extract PortaFiducia')
    }
}

def install_porta_fiducia() {
    /*
     * Install PortaFiducia in a (new) virtual environment.
     */
    sh '''
        python3 -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install --upgrade awscli
        pip install -e PortaFiducia
    '''
}

def kill_all_clusters(instance_type, region) {
    def instance_type_without_period = sh(
        script: "echo ${instance_type} | tr -d '.\\n'",
        returnStdout: true
    )
    sh ". venv/bin/activate; ./PortaFiducia/scripts/delete_manual_cluster.py --cluster-name \'*${instance_type_without_period}*\' --region ${region} || true"
}

def wait_for_odcr_capacity(region, instance_count, odcr) {
    sh ". venv/bin/activate; ./PortaFiducia/scripts/wait_for_odcr_capacity.py --region ${region} --odcr-id ${odcr} --required-capacity ${instance_count}"
}

def run_test_orchestrator_once(run_name, build_tag, os, instance_type, instance_count, region, odcr, addl_args) {
    /*
     * Run PortaFiducia/tests/test_orchestrator.py with given command line arguments
     */

    /*
     * This is a temporary workaround to deal with clusters not getting cleaned up
     * Attempt to cleanup all instances types in a region when you get the lock.
     * This is required b/c milestones send multiple SIG_TERM, followed by a SIG_KILL after 20s.
     * This stops us from being able to add additional capacity to the Jenkins service.
     */
    kill_all_clusters(instance_type, region)
    wait_for_odcr_capacity(region, instance_count, odcr)

    /*
     * p3dn clusters are getting ICE'ed within an ODCR, when we try to launch them back to back.
     * This is a non-deterministic work around to help us increase our chances of not getting ICE'ed.
     * Worst case, this increases our time to publish results on PR's by 15 minutes.
     */
    if (instance_type == "p3dn.24xlarge") {
        sh "sleep 150"
    }

    def cluster_name = get_cluster_name(build_tag, os, instance_type)
    def args = "--os ${os} --odcr ${odcr} --instance-type ${instance_type} --instance-count ${instance_count} --region ${region} --cluster-name ${cluster_name} ${addl_args} --junit-xml outputs/${cluster_name}.xml"
    def ret = sh (
                    script: ". venv/bin/activate; ./PortaFiducia/tests/test_orchestrator.py ${args}",
                    returnStatus: true
                  )
    if (ret == 65)
        unstable('Scripts exited with status 65')
    else if (ret != 0)
        build_ok = false
    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        sh "exit ${ret}"
    }
}

def get_random_string(len) {
    def s = sh (
        script: "cat /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c ${len}",
        returnStdout: true
    )
    return s
}

def get_cluster_name(build_tag, os, instance_type) {
    /*
     * Compose the cluster name. Pcluster requires a cluster name under 60 characters.
     * cluster name cannot have ".".
     * Jenkins does not allow groovy to use the replace() method
     * of string. Therefore we used shell command sed to replace "." with ""
     */
    build_tag = sh(
                        script: "echo ${build_tag} | sed \"s/^jenkins-//g\" | sed \"s/ //g\"",
                        returnStdout: true
                )

    def cluster_name = sh(
                        script: "echo '${build_tag.take(28)}-${os.take(10)}-${instance_type}-'${get_random_string(8)} | tr -d '.\\n'",
                        returnStdout: true
                     )

    return cluster_name
}


def get_test_stage_with_lock(stage_name, build_tag, os, instance_type, region, lock_label, lock_count, odcr, addl_args) {
    /*
     * Generate a single test stage that run test_orchestrator.py with the given parameters.
     * The job will queue until it acquires the given number of locks. The locks will be released
     * after the job finishes.
     * param@ stage_name: the name of the stage
     * param@ build_tag: the BUILD_TAG env generated by Jenkins
     * param@ os: the operating system for the test stage.
     * param@ instance_type: the instance type for the test stage.
     * param@ region: the (default) aws region where the tests are run.
     * param@ lock_label: str, the label of the lockable resources.
     * param@ lock_count: int, the quantity of the lockable resources.
     * param@ odcr: The on demand capacity reservation ID to create instances in
     * param@ addl_args: additional arguments passed to test_orchestrator.py
     * return@: the test stage.
     */
    return {
        stage("${stage_name}") {
            lock(label: lock_label, quantity: lock_count) {
                this.run_test_orchestrator_once(stage_name, build_tag, os, instance_type, lock_count, region, odcr, addl_args)
            }
        }
    }
}


pipeline {
    agent {
        ecs {
            inheritFrom 'fargate-large'
        }
    }
    options {
        buildDiscarder(logRotator(daysToKeepStr: "90"))
        timeout(time: 24, unit: 'HOURS')
    }
    environment {
        // AWS region where the cluster is created
        REGION="us-west-2"
    }
    stages {
        // Cleanup workspace before job start.
        stage("Clean up workspace") {
            steps{
                deleteDir()
            }
        }
        stage("Checkout SCM repo") {
            steps {
                checkout scm
            }
        }
        stage("Download and extract PortaFiducia") {
            steps {
                script {
                    sh 'printenv'
                    download_and_extract_portafiducia('PortaFiducia')
                }
            }
        }
        stage("Install PortaFiducia") {
            steps {
                script {
                    install_porta_fiducia()
                }

            }
        }
        stage("Test OFI NCCL Plugin") {
            steps {
                script {
                    def stages = [:]

                    def nccl_version = "--test-nccl-version v2.22.3-1"
                    def timeout = "--timeout 120"
                    def cluster_type = "--cluster-type manual_cluster"
                    def test_target = "--test-target aws-ofi-nccl"
                    def test_type = "--test-type pr"
                    def build_type = "--aws-ofi-nccl-build-type debug"
                    def pr_num = "--test-aws-ofi-nccl-pr $env.CHANGE_ID"
                    def test_list = "--test-list test_nccl_test test_ofi_nccl_functional"
                    def base_args = "${nccl_version} ${timeout} ${cluster_type} ${test_target} ${test_type} ${build_type} ${pr_num} ${test_list}"

                    def num_instances = 4
                    def p3dn_lock_label = "p3dn-1-4node"
                    def p3dn_region = "ap-northeast-1"
                    def p3dn_odcr = "cr-08ecd03c0644442e4"
                    def p3dn_addl_args = "${base_args} --odcr-placement-group-name p3dn-placement-group"
                    def p3dn_al2_addl_args = "${p3dn_addl_args} --ami-id ami-0b9081c7bc36c4eba"
                    def p4d_lock_label = "p4d-1-4node"
                    def p4d_region = "us-east-2"
                    def p4d_odcr = "cr-0e5eebb3c896f6af0"
                    def p5_lock_label = "p5-1-4node"
                    def p5_region = "af-south-1"
                    def p5_odcr = "cr-02eb632dcd8175139"
                    def p4_p5_addl_args = "${base_args} --use-prebuilt-ami-with-efa-installer true"
                    def g4dn_lock_label = "g4dn-1-4node"
                    def g4dn_region = "us-west-2"
                    def g4dn_odcr = "cr-0e2f9cac30bb5ad5f"
                    def g4dn_addl_args = "${base_args} --odcr-placement-group-name g4dn-placement-group"

                    // p3dn tests
                    stages["4_p3dn_al2"] = get_test_stage_with_lock("4_p3dn_al2", env.BUILD_TAG, "alinux2", "p3dn.24xlarge", p3dn_region, p3dn_lock_label, num_instances, p3dn_odcr, p3dn_al2_addl_args)
                    stages["4_p3dn_ubuntu2004"] = get_test_stage_with_lock("4_p3dn_ubuntu2004", env.BUILD_TAG, "ubuntu2004", "p3dn.24xlarge", p3dn_region, p3dn_lock_label, num_instances, p3dn_odcr, p3dn_addl_args)
                    stages["4_p3dn_ubuntu2204"] = get_test_stage_with_lock("4_p3dn_ubuntu2204", env.BUILD_TAG, "ubuntu2204", "p3dn.24xlarge", p3dn_region, p3dn_lock_label, num_instances, p3dn_odcr, p3dn_addl_args)

                    // p4d tests
                    stages["4_p4d_alinux2"] = get_test_stage_with_lock("4_p4d_alinux2", env.BUILD_TAG, "alinux2", "p4d.24xlarge", p4d_region, p4d_lock_label, num_instances, p4d_odcr, p4_p5_addl_args)
                    stages["4_p4d_ubuntu2004"] = get_test_stage_with_lock("4_p4d_ubuntu2004", env.BUILD_TAG, "ubuntu2004", "p4d.24xlarge", p4d_region, p4d_lock_label, num_instances, p4d_odcr, p4_p5_addl_args)
                    stages["4_p4d_ubuntu2204"] = get_test_stage_with_lock("4_p4d_ubuntu2204", env.BUILD_TAG, "ubuntu2204", "p4d.24xlarge", p4d_region, p4d_lock_label, num_instances, p4d_odcr, p4_p5_addl_args)

                    // p5 tests
                    stages["4_p5_alinux2"] = get_test_stage_with_lock("4_p5_alinux2", env.BUILD_TAG, "alinux2", "p5.48xlarge", p5_region, p5_lock_label, num_instances, p5_odcr, p4_p5_addl_args)
                    stages["4_p5_ubuntu2004"] = get_test_stage_with_lock("4_p5_ubuntu2004", env.BUILD_TAG, "ubuntu2004", "p5.48xlarge", p5_region, p5_lock_label, num_instances, p5_odcr, p4_p5_addl_args)
                    stages["4_p5_ubuntu2204"] = get_test_stage_with_lock("4_p5_ubuntu2204", env.BUILD_TAG, "ubuntu2204", "p5.48xlarge", p5_region, p5_lock_label, num_instances, p5_odcr, p4_p5_addl_args)

                    // g4dn tests
                    stages["4_g4dn_ubuntu2204"] = get_test_stage_with_lock("4_g4dn_ubuntu2204", env.BUILD_TAG, "ubuntu2204", "g4dn.12xlarge", g4dn_region, g4dn_lock_label, num_instances, g4dn_odcr, g4dn_addl_args)

                    parallel stages
                }
            }
        }
        stage('check build_ok') {
            steps {
                script {
                    if (build_ok) {
                        currentBuild.result = "SUCCESS"
                    }
                    else {
                        currentBuild.result = "FAILURE"
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'find outputs -name "*.xml" | xargs du -shc'
            junit testResults: 'outputs/**/*.xml', keepLongStdio: false
            archiveArtifacts artifacts: 'outputs/**/*.*'
        }
        failure {
            sh 'echo "Jenkins pipeline has failed."'
        }
        aborted {
            sh 'echo "Jenkins pipeline aborted."'
        }
        cleanup {
            deleteDir()
        }
    }
}
